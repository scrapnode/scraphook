// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: webhook_token.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WebhookTokenClient is the client API for WebhookToken service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebhookTokenClient interface {
	Create(ctx context.Context, in *WebhookTokenCreateReq, opts ...grpc.CallOption) (*WebhookTokenRecord, error)
	Get(ctx context.Context, in *WebhookTokenGetReq, opts ...grpc.CallOption) (*WebhookTokenRecord, error)
	List(ctx context.Context, in *WebhookTokenListReq, opts ...grpc.CallOption) (*WebhookTokenListRes, error)
	Delete(ctx context.Context, in *WebhookTokenDeleteReq, opts ...grpc.CallOption) (*WebhookTokenDeleteRes, error)
}

type webhookTokenClient struct {
	cc grpc.ClientConnInterface
}

func NewWebhookTokenClient(cc grpc.ClientConnInterface) WebhookTokenClient {
	return &webhookTokenClient{cc}
}

func (c *webhookTokenClient) Create(ctx context.Context, in *WebhookTokenCreateReq, opts ...grpc.CallOption) (*WebhookTokenRecord, error) {
	out := new(WebhookTokenRecord)
	err := c.cc.Invoke(ctx, "/scraphook.admin.dashboard.v1.WebhookToken/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookTokenClient) Get(ctx context.Context, in *WebhookTokenGetReq, opts ...grpc.CallOption) (*WebhookTokenRecord, error) {
	out := new(WebhookTokenRecord)
	err := c.cc.Invoke(ctx, "/scraphook.admin.dashboard.v1.WebhookToken/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookTokenClient) List(ctx context.Context, in *WebhookTokenListReq, opts ...grpc.CallOption) (*WebhookTokenListRes, error) {
	out := new(WebhookTokenListRes)
	err := c.cc.Invoke(ctx, "/scraphook.admin.dashboard.v1.WebhookToken/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookTokenClient) Delete(ctx context.Context, in *WebhookTokenDeleteReq, opts ...grpc.CallOption) (*WebhookTokenDeleteRes, error) {
	out := new(WebhookTokenDeleteRes)
	err := c.cc.Invoke(ctx, "/scraphook.admin.dashboard.v1.WebhookToken/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebhookTokenServer is the server API for WebhookToken service.
// All implementations must embed UnimplementedWebhookTokenServer
// for forward compatibility
type WebhookTokenServer interface {
	Create(context.Context, *WebhookTokenCreateReq) (*WebhookTokenRecord, error)
	Get(context.Context, *WebhookTokenGetReq) (*WebhookTokenRecord, error)
	List(context.Context, *WebhookTokenListReq) (*WebhookTokenListRes, error)
	Delete(context.Context, *WebhookTokenDeleteReq) (*WebhookTokenDeleteRes, error)
	mustEmbedUnimplementedWebhookTokenServer()
}

// UnimplementedWebhookTokenServer must be embedded to have forward compatible implementations.
type UnimplementedWebhookTokenServer struct {
}

func (UnimplementedWebhookTokenServer) Create(context.Context, *WebhookTokenCreateReq) (*WebhookTokenRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedWebhookTokenServer) Get(context.Context, *WebhookTokenGetReq) (*WebhookTokenRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedWebhookTokenServer) List(context.Context, *WebhookTokenListReq) (*WebhookTokenListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedWebhookTokenServer) Delete(context.Context, *WebhookTokenDeleteReq) (*WebhookTokenDeleteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedWebhookTokenServer) mustEmbedUnimplementedWebhookTokenServer() {}

// UnsafeWebhookTokenServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebhookTokenServer will
// result in compilation errors.
type UnsafeWebhookTokenServer interface {
	mustEmbedUnimplementedWebhookTokenServer()
}

func RegisterWebhookTokenServer(s grpc.ServiceRegistrar, srv WebhookTokenServer) {
	s.RegisterService(&WebhookToken_ServiceDesc, srv)
}

func _WebhookToken_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebhookTokenCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookTokenServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scraphook.admin.dashboard.v1.WebhookToken/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookTokenServer).Create(ctx, req.(*WebhookTokenCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookToken_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebhookTokenGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookTokenServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scraphook.admin.dashboard.v1.WebhookToken/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookTokenServer).Get(ctx, req.(*WebhookTokenGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookToken_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebhookTokenListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookTokenServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scraphook.admin.dashboard.v1.WebhookToken/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookTokenServer).List(ctx, req.(*WebhookTokenListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookToken_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebhookTokenDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookTokenServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scraphook.admin.dashboard.v1.WebhookToken/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookTokenServer).Delete(ctx, req.(*WebhookTokenDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// WebhookToken_ServiceDesc is the grpc.ServiceDesc for WebhookToken service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebhookToken_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scraphook.admin.dashboard.v1.WebhookToken",
	HandlerType: (*WebhookTokenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _WebhookToken_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _WebhookToken_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _WebhookToken_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _WebhookToken_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "webhook_token.proto",
}
