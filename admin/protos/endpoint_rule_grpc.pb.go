// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: endpoint_rule.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EndpointRuleClient is the client API for EndpointRule service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EndpointRuleClient interface {
	Save(ctx context.Context, in *EndpointRuleSaveReq, opts ...grpc.CallOption) (*EndpointRuleRecord, error)
	Get(ctx context.Context, in *EndpointRuleGetReq, opts ...grpc.CallOption) (*EndpointRuleRecord, error)
	List(ctx context.Context, in *EndpointRuleListReq, opts ...grpc.CallOption) (*EndpointRuleListRes, error)
	Delete(ctx context.Context, in *EndpointRuleDeleteReq, opts ...grpc.CallOption) (*EndpointRuleDeleteRes, error)
}

type endpointRuleClient struct {
	cc grpc.ClientConnInterface
}

func NewEndpointRuleClient(cc grpc.ClientConnInterface) EndpointRuleClient {
	return &endpointRuleClient{cc}
}

func (c *endpointRuleClient) Save(ctx context.Context, in *EndpointRuleSaveReq, opts ...grpc.CallOption) (*EndpointRuleRecord, error) {
	out := new(EndpointRuleRecord)
	err := c.cc.Invoke(ctx, "/scraphook.admin.dashboard.v1.EndpointRule/Save", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointRuleClient) Get(ctx context.Context, in *EndpointRuleGetReq, opts ...grpc.CallOption) (*EndpointRuleRecord, error) {
	out := new(EndpointRuleRecord)
	err := c.cc.Invoke(ctx, "/scraphook.admin.dashboard.v1.EndpointRule/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointRuleClient) List(ctx context.Context, in *EndpointRuleListReq, opts ...grpc.CallOption) (*EndpointRuleListRes, error) {
	out := new(EndpointRuleListRes)
	err := c.cc.Invoke(ctx, "/scraphook.admin.dashboard.v1.EndpointRule/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointRuleClient) Delete(ctx context.Context, in *EndpointRuleDeleteReq, opts ...grpc.CallOption) (*EndpointRuleDeleteRes, error) {
	out := new(EndpointRuleDeleteRes)
	err := c.cc.Invoke(ctx, "/scraphook.admin.dashboard.v1.EndpointRule/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EndpointRuleServer is the server API for EndpointRule service.
// All implementations must embed UnimplementedEndpointRuleServer
// for forward compatibility
type EndpointRuleServer interface {
	Save(context.Context, *EndpointRuleSaveReq) (*EndpointRuleRecord, error)
	Get(context.Context, *EndpointRuleGetReq) (*EndpointRuleRecord, error)
	List(context.Context, *EndpointRuleListReq) (*EndpointRuleListRes, error)
	Delete(context.Context, *EndpointRuleDeleteReq) (*EndpointRuleDeleteRes, error)
	mustEmbedUnimplementedEndpointRuleServer()
}

// UnimplementedEndpointRuleServer must be embedded to have forward compatible implementations.
type UnimplementedEndpointRuleServer struct {
}

func (UnimplementedEndpointRuleServer) Save(context.Context, *EndpointRuleSaveReq) (*EndpointRuleRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedEndpointRuleServer) Get(context.Context, *EndpointRuleGetReq) (*EndpointRuleRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedEndpointRuleServer) List(context.Context, *EndpointRuleListReq) (*EndpointRuleListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedEndpointRuleServer) Delete(context.Context, *EndpointRuleDeleteReq) (*EndpointRuleDeleteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedEndpointRuleServer) mustEmbedUnimplementedEndpointRuleServer() {}

// UnsafeEndpointRuleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EndpointRuleServer will
// result in compilation errors.
type UnsafeEndpointRuleServer interface {
	mustEmbedUnimplementedEndpointRuleServer()
}

func RegisterEndpointRuleServer(s grpc.ServiceRegistrar, srv EndpointRuleServer) {
	s.RegisterService(&EndpointRule_ServiceDesc, srv)
}

func _EndpointRule_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndpointRuleSaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointRuleServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scraphook.admin.dashboard.v1.EndpointRule/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointRuleServer).Save(ctx, req.(*EndpointRuleSaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndpointRule_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndpointRuleGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointRuleServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scraphook.admin.dashboard.v1.EndpointRule/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointRuleServer).Get(ctx, req.(*EndpointRuleGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndpointRule_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndpointRuleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointRuleServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scraphook.admin.dashboard.v1.EndpointRule/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointRuleServer).List(ctx, req.(*EndpointRuleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndpointRule_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndpointRuleDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointRuleServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scraphook.admin.dashboard.v1.EndpointRule/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointRuleServer).Delete(ctx, req.(*EndpointRuleDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// EndpointRule_ServiceDesc is the grpc.ServiceDesc for EndpointRule service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EndpointRule_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scraphook.admin.dashboard.v1.EndpointRule",
	HandlerType: (*EndpointRuleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Save",
			Handler:    _EndpointRule_Save_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _EndpointRule_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _EndpointRule_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _EndpointRule_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "endpoint_rule.proto",
}
